
struct State<S, U, V> {
  parser_state : S,
  user_state   : U,
  value : V,
}

type Combinator<S, U, I, V> = fn( State<S, U, I> ) -> State<S, U, V>

impl<S, U, V> State<S, U, V> {
  fn exec( &self ) -> V {
    self.function( self.parser_state, self.function )
  }
}

fn or<S, U, I, V>( fst : State<S, U, V>, snd : State<S, U, V> ) -> Combinator<S, U, I, V> {
  return | state : State<S, U, I> | {

  }
}

fn main() {
  println!("Hello, world!");
}
